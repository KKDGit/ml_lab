.. amaze documentation master file, created by
   sphinx-quickstart on Sat Jun  7 12:30:02 2014.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

Welcome to amaze's documentation!
=================================

This project serves mainly as an example project for the course
*The Python Developer's Toolkit*, which can be found at
`Pluralsight <http://www.pluralsight.com>`_.

Simple use
----------
For the impatient: here's a quick overview of how to use this project. Normally,
all you have to do is import and run, like this::

    import amaze
    m = amaze.generate(8, 5)
    print(m)


This will generate a maze of dimensions 8 by 5 and the output might look like this::

    +-+-+-+-+-+-+-+-+
    |       | | |   |
    + +-+-+-+ + + +-+
    | |   |   | |   |
    + + +-+ + + +-+ +
    |     | |   |   |
    + + +-+ +-+-+-+ +
    | |     | | |   |
    +-+ +-+-+ + + + +
    |             | |
    +-+-+-+-+-+-+-+-+

As an extra argument, you can pass the generate method a generator class. This
enables you to choose a different algorithm for generating the maze. For example,
to generate a maze using the recursive algorithm::

    m = amaze.generate(10, 10, amaze.Recursive)

For more information about how to use this library, see the :ref:`api`.

How it works
------------
The mazes generated by this library are *perfect* mazes, which means that they
do not contain any *loops*, and there is exactly one path between any two points
in the maze.

Both algorithms start with a *m* by *n* rectangle in which all walls are intact,
so all the squares in the maze are completely isolated from all others. From there,
walls are removed randomly, but in such a way that we end up with a perfect maze.

Features
--------

- A demo UI
- A maze runner
- Two different generating algorithms

Contents:

.. toctree::
   :maxdepth: 2

   api

Indices and tables
==================

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`

